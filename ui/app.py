import eventlet
eventlet.monkey_patch()

import os
import sys
import logging
import json
import threading
import time
from flask import Flask, render_template, request, jsonify, send_from_directory
from flask_socketio import SocketIO, emit
from dotenv import load_dotenv

# Configure logging first
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Import our modules
from agents.circuit_design_crew import run_circuit_design
from database.models import create_database, get_session
from database.seed_data import seed_basic_components
from simulations.spice_simulator import simulator
from utils.kicad_integration import kicad_generator
from utils.component_selection import component_selector

# Import Phase 2.1 advanced simulation tools
try:
    from agents.tools.advanced_simulation_tool import AdvancedSimulationTool
    PHASE_2_1_AVAILABLE = True
    logger.info("Phase 2.1 advanced simulation tools loaded successfully")
except ImportError as e:
    PHASE_2_1_AVAILABLE = False
    logger.warning(f"Phase 2.1 tools not available: {e}")

def generate_files_from_crew_result(crew_result, user_input):
    """Generate schematic and code files based on CrewAI results."""
    import re
    
    try:
        # Determine circuit type for file naming
        circuit_type = determine_circuit_type(user_input)
        base_name = f"{circuit_type}_circuit"
        
        # Extract Arduino code from CrewAI results
        arduino_code = extract_arduino_code_from_crew_result(crew_result)
        if arduino_code:
            # Save Arduino code to file
            code_file = f"./output/{base_name}.ino"
            with open(code_file, 'w') as f:
                f.write(arduino_code)
            logger.info(f"Generated Arduino code file: {code_file}")
        
        # Generate schematic based on circuit type and CrewAI analysis
        generate_schematic_from_crew_result(crew_result, circuit_type, user_input)
        
        # Generate JSON metadata
        metadata = {
            "circuit_type": circuit_type,
            "user_input": user_input,
            "crew_analysis": str(crew_result)[:1000],  # Truncate for storage
            "generated_files": [f"{base_name}.svg", f"{base_name}.ino", f"{base_name}.json"]
        }
        
        json_file = f"./output/{base_name}.json"
        with open(json_file, 'w') as f:
            json.dump(metadata, f, indent=2)
        
        logger.info(f"Generated files for {circuit_type} circuit based on CrewAI results")
        
    except Exception as e:
        logger.error(f"Error generating files from CrewAI results: {e}")
        raise



def generate_default_arduino_code(crew_result):
    """Generate default Arduino code based on CrewAI analysis."""
    result_str = str(crew_result).lower()
    
    if 'motor' in result_str:
        return '''// Motor Control Circuit
// Generated by Circuit AI Design Assistant

#define MOTOR_PIN 9
#define SPEED_PIN A0

void setup() {
  pinMode(MOTOR_PIN, OUTPUT);
  Serial.begin(9600);
}

void loop() {
  int speedValue = analogRead(SPEED_PIN);
  int motorSpeed = map(speedValue, 0, 1023, 0, 255);
  analogWrite(MOTOR_PIN, motorSpeed);
  
  Serial.print("Motor Speed: ");
  Serial.println(motorSpeed);
  delay(100);
}'''
    
    elif 'sensor' in result_str or 'temperature' in result_str:
        return '''// Sensor Circuit
// Generated by Circuit AI Design Assistant

#define SENSOR_PIN A0
#define LED_PIN 13

void setup() {
  pinMode(LED_PIN, OUTPUT);
  Serial.begin(9600);
}

void loop() {
  int sensorValue = analogRead(SENSOR_PIN);
  float voltage = sensorValue * (5.0 / 1023.0);
  
  Serial.print("Sensor Value: ");
  Serial.print(sensorValue);
  Serial.print(" | Voltage: ");
  Serial.println(voltage);
  
  // Blink LED based on sensor reading
  if (sensorValue > 512) {
    digitalWrite(LED_PIN, HIGH);
  } else {
    digitalWrite(LED_PIN, LOW);
  }
  
  delay(500);
}'''
    
    else:  # Default LED blinker
        return '''// LED Blinker Circuit
// Generated by Circuit AI Design Assistant

#define LED_PIN 13

void setup() {
  pinMode(LED_PIN, OUTPUT);
  Serial.begin(9600);
}

void loop() {
  digitalWrite(LED_PIN, HIGH);   // Turn LED on
  Serial.println("LED ON");
  delay(1000);                   // Wait 1 second
  
  digitalWrite(LED_PIN, LOW);    // Turn LED off
  Serial.println("LED OFF");
  delay(1000);                   // Wait 1 second
}'''

def generate_schematic_from_crew_result(crew_result, circuit_type, user_input):
    """Generate schematic SVG based on CrewAI results and circuit type."""
    
    if circuit_type == 'motor':
        generate_motor_schematic()
    elif circuit_type == 'sensor':
        generate_sensor_schematic()
    else:
        generate_led_schematic()

def generate_motor_schematic():
    """Generate motor control schematic."""
    svg_content = '''<?xml version="1.0" encoding="UTF-8"?>
<svg width="500" height="300" xmlns="http://www.w3.org/2000/svg">
  <title>Motor Control Circuit</title>

  <!-- Background -->
  <rect width="500" height="300" fill="white" stroke="black" stroke-width="1"/>

  <!-- Arduino Uno -->
  <rect x="20" y="50" width="80" height="60" fill="lightblue" stroke="black" stroke-width="1"/>
  <text x="60" y="75" text-anchor="middle" font-family="Arial" font-size="12">Arduino</text>
  <text x="60" y="90" text-anchor="middle" font-family="Arial" font-size="10">Uno R3</text>

  <!-- Motor Driver -->
  <rect x="200" y="60" width="60" height="40" fill="lightgreen" stroke="black" stroke-width="1"/>
  <text x="230" y="75" text-anchor="middle" font-family="Arial" font-size="10">Motor</text>
  <text x="230" y="88" text-anchor="middle" font-family="Arial" font-size="10">Driver</text>

  <!-- Motor -->
  <circle cx="350" cy="80" r="25" fill="gray" stroke="black" stroke-width="2"/>
  <text x="350" y="85" text-anchor="middle" font-family="Arial" font-size="10">M</text>
  <text x="350" y="120" text-anchor="middle" font-family="Arial" font-size="8">DC Motor</text>

  <!-- Potentiometer -->
  <rect x="40" y="150" width="40" height="15" fill="orange" stroke="black" stroke-width="1"/>
  <text x="60" y="145" text-anchor="middle" font-family="Arial" font-size="8">Speed Control</text>
  <text x="60" y="180" text-anchor="middle" font-family="Arial" font-size="8">10kΩ Pot</text>

  <!-- Wires -->
  <line x1="100" y1="70" x2="200" y2="70" stroke="red" stroke-width="2"/>
  <line x1="260" y1="80" x2="325" y2="80" stroke="red" stroke-width="2"/>
  <line x1="100" y1="90" x2="180" y2="90" stroke="blue" stroke-width="2"/>
  <line x1="180" y1="90" x2="180" y2="157" stroke="blue" stroke-width="2"/>
  <line x1="80" y1="157" x2="180" y2="157" stroke="blue" stroke-width="2"/>

  <!-- Pin labels -->
  <text x="105" y="65" font-family="Arial" font-size="8">D9 (PWM)</text>
  <text x="105" y="105" font-family="Arial" font-size="8">A0</text>
  <text x="105" y="125" font-family="Arial" font-size="8">GND</text>

  <!-- Title -->
  <text x="250" y="25" text-anchor="middle" font-family="Arial" font-size="16" font-weight="bold">Motor Control Circuit</text>
</svg>'''
    
    with open('./output/motor_circuit.svg', 'w') as f:
        f.write(svg_content)

def generate_sensor_schematic():
    """Generate sensor interface schematic."""
    svg_content = '''<?xml version="1.0" encoding="UTF-8"?>
<svg width="450" height="250" xmlns="http://www.w3.org/2000/svg">
  <title>Sensor Interface Circuit</title>

  <!-- Background -->
  <rect width="450" height="250" fill="white" stroke="black" stroke-width="1"/>

  <!-- Arduino Uno -->
  <rect x="20" y="40" width="80" height="60" fill="lightblue" stroke="black" stroke-width="1"/>
  <text x="60" y="65" text-anchor="middle" font-family="Arial" font-size="12">Arduino</text>
  <text x="60" y="80" text-anchor="middle" font-family="Arial" font-size="10">Uno R3</text>

  <!-- Sensor -->
  <rect x="200" y="55" width="50" height="30" fill="yellow" stroke="black" stroke-width="1"/>
  <text x="225" y="75" text-anchor="middle" font-family="Arial" font-size="10">Sensor</text>

  <!-- Pull-up Resistor -->
  <rect x="150" y="40" width="30" height="10" fill="lightgray" stroke="black" stroke-width="1"/>
  <text x="165" y="35" text-anchor="middle" font-family="Arial" font-size="8">R1</text>
  <text x="165" y="65" text-anchor="middle" font-family="Arial" font-size="8">10kΩ</text>

  <!-- LED Indicator -->
  <circle cx="320" cy="70" r="8" fill="red" stroke="black" stroke-width="1"/>
  <text x="320" y="55" text-anchor="middle" font-family="Arial" font-size="8">LED</text>

  <!-- Resistor for LED -->
  <rect x="280" y="65" width="25" height="8" fill="lightgray" stroke="black" stroke-width="1"/>
  <text x="292" y="60" text-anchor="middle" font-family="Arial" font-size="8">R2</text>
  <text x="292" y="85" text-anchor="middle" font-family="Arial" font-size="8">330Ω</text>

  <!-- Wires -->
  <line x1="100" y1="60" x2="150" y2="60" stroke="red" stroke-width="2"/>
  <line x1="180" y1="45" x2="200" y2="45" stroke="red" stroke-width="2"/>
  <line x1="200" y1="45" x2="200" y2="55" stroke="red" stroke-width="2"/>
  <line x1="165" y1="50" x2="165" y2="70" stroke="blue" stroke-width="2"/>
  <line x1="165" y1="70" x2="200" y2="70" stroke="blue" stroke-width="2"/>
  <line x1="250" y1="70" x2="280" y2="70" stroke="green" stroke-width="2"/>
  <line x1="305" y1="70" x2="312" y2="70" stroke="green" stroke-width="2"/>

  <!-- Pin labels -->
  <text x="105" y="55" font-family="Arial" font-size="8">5V</text>
  <text x="105" y="75" font-family="Arial" font-size="8">A0</text>
  <text x="105" y="95" font-family="Arial" font-size="8">D13</text>

  <!-- Title -->
  <text x="225" y="20" text-anchor="middle" font-family="Arial" font-size="16" font-weight="bold">Sensor Interface Circuit</text>
</svg>'''
    
    with open('./output/sensor_circuit.svg', 'w') as f:
        f.write(svg_content)

def generate_led_schematic():
    """Generate LED circuit schematic (fallback)."""
    svg_content = '''<?xml version="1.0" encoding="UTF-8"?>
<svg width="400" height="200" xmlns="http://www.w3.org/2000/svg">
  <title>LED Circuit</title>

  <!-- Background -->
  <rect width="400" height="200" fill="white" stroke="black" stroke-width="1"/>

  <!-- Arduino Uno -->
  <rect x="20" y="40" width="60" height="40" fill="lightblue" stroke="black" stroke-width="1"/>
  <text x="50" y="65" text-anchor="middle" font-family="Arial" font-size="10">Arduino</text>
  <text x="50" y="75" text-anchor="middle" font-family="Arial" font-size="8">Uno R3</text>

  <!-- Resistor -->
  <rect x="120" y="55" width="30" height="10" fill="lightgray" stroke="black" stroke-width="1"/>
  <text x="135" y="50" text-anchor="middle" font-family="Arial" font-size="8">R1</text>
  <text x="135" y="80" text-anchor="middle" font-family="Arial" font-size="8">330Ω</text>

  <!-- LED -->
  <circle cx="200" cy="60" r="8" fill="red" stroke="black" stroke-width="1"/>
  <text x="200" y="45" text-anchor="middle" font-family="Arial" font-size="8">D1</text>
  <text x="200" y="85" text-anchor="middle" font-family="Arial" font-size="8">LED</text>

  <!-- Wires -->
  <line x1="80" y1="60" x2="120" y2="60" stroke="black" stroke-width="2"/>
  <line x1="150" y1="60" x2="192" y2="60" stroke="black" stroke-width="2"/>
  <line x1="208" y1="60" x2="250" y2="60" stroke="black" stroke-width="2"/>
  <line x1="250" y1="60" x2="250" y2="100" stroke="black" stroke-width="2"/>
  <line x1="250" y1="100" x2="50" y2="100" stroke="black" stroke-width="2"/>
  <line x1="50" y1="100" x2="50" y2="80" stroke="black" stroke-width="2"/>

  <!-- Pin labels -->
  <text x="85" y="55" font-family="Arial" font-size="8">D13</text>
  <text x="45" y="95" font-family="Arial" font-size="8">GND</text>

  <!-- Title -->
  <text x="200" y="20" text-anchor="middle" font-family="Arial" font-size="14" font-weight="bold">LED Circuit Schematic</text>
</svg>'''
    
    with open('./output/led_circuit.svg', 'w') as f:
        f.write(svg_content)

def run_advanced_simulation(circuit_type, user_input):
    """Run Phase 2.1 advanced simulation based on circuit type."""
    try:
        if not PHASE_2_1_AVAILABLE:
            logger.warning("Phase 2.1 tools not available, using basic simulation")
            return run_basic_simulation(circuit_type)
        
        # Initialize advanced simulation tool
        advanced_sim = AdvancedSimulationTool()
        
        # Prepare simulation parameters based on circuit type
        if circuit_type == 'led':
            parameters = {
                'circuit_type': 'led',
                'led_voltage': 2.0,
                'supply_voltage': 5.0,
                'current': 0.02
            }
        elif circuit_type == 'motor':
            parameters = {
                'circuit_type': 'motor',
                'motor_voltage': 12.0,
                'supply_voltage': 12.0,
                'current': 0.5
            }
        elif circuit_type == 'sensor':
            parameters = {
                'circuit_type': 'sensor',
                'sensor_voltage': 3.3,
                'supply_voltage': 5.0,
                'current': 0.01
            }
        else:
            parameters = {
                'circuit_type': 'custom',
                'supply_voltage': 5.0,
                'current': 0.02
            }
        
        # Run advanced simulation
        result = advanced_sim._run(f"Simulate {circuit_type} circuit with parameters: {parameters}")
        
        if result and hasattr(result, 'get') and result.get('success'):
            logger.info(f"Advanced simulation completed successfully for {circuit_type}")
            return result
        else:
            logger.warning("Advanced simulation failed, using basic simulation")
            return run_basic_simulation(circuit_type)
            
    except Exception as e:
        logger.error(f"Advanced simulation error: {e}")
        return run_basic_simulation(circuit_type)

def run_basic_simulation(circuit_type):
    """Run basic simulation as fallback."""
    try:
        # Create basic circuit and run DC analysis
        circuit = simulator.create_led_circuit()
        if circuit:
            dc_results = simulator.run_dc_analysis(circuit)
            if dc_results:
                return {
                    'success': True,
                    'analysis_type': 'DC Operating Point',
                    'circuit_type': circuit_type,
                    'results': dc_results,
                    'plot_data': simulator.generate_plot(dc_results)
                }
        
        return {
            'success': False,
            'analysis_type': 'Basic Simulation',
            'circuit_type': circuit_type,
            'error': 'Simulation failed'
        }
    except Exception as e:
        logger.error(f"Basic simulation error: {e}")
        return {
            'success': False,
            'analysis_type': 'Basic Simulation',
            'circuit_type': circuit_type,
            'error': str(e)
        }

def extract_arduino_code_from_crew_result(crew_result):
    """Extract Arduino code from CrewAI result."""
    if not crew_result:
        return None
    
    try:
        # Convert CrewOutput to string if needed
        result_str = str(crew_result)
        
        # Look for code blocks in the crew result
        import re
        
        # Try different patterns to extract Arduino code
        patterns = [
            # Pattern for main_code.ino with markdown formatting
            r'main_code\.ino`:\*\*\s*```(?:arduino|cpp|c\+\+)?\s*([\s\S]*?)```',
            # Pattern for main_code.ino with code block
            r'main_code\.ino[`\s]*:\s*```(?:arduino|cpp|c\+\+)?\s*([\s\S]*?)```',
            # Pattern for main_code.ino without explicit code block
            r'main_code\.ino[`\s]*:\s*\*\*\s*([\s\S]*?)(?=\n\n|\n\*\*|\Z)',
            # General Arduino code in code blocks
            r'```(?:arduino|cpp|c\+\+)\s*([\s\S]*?)```',
            # Arduino code with setup and loop functions
            r'(#include[\s\S]*?void\s+setup\s*\(\s*\)\s*\{[\s\S]*?\}[\s\S]*?void\s+loop\s*\(\s*\)\s*\{[\s\S]*?\})',
            # Simple setup/loop pattern
            r'(void\s+setup\s*\(\s*\)\s*\{[\s\S]*?\}[\s\S]*?void\s+loop\s*\(\s*\)\s*\{[\s\S]*?\})'
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, result_str, re.IGNORECASE | re.MULTILINE)
            if matches:
                code = matches[0].strip()
                if len(code) > 50 and ('setup' in code.lower() or 'loop' in code.lower() or '#include' in code):
                    # Clean up the code
                    code = re.sub(r'^// main_code\.ino\s*\n?', '', code, flags=re.MULTILINE)
                    code = re.sub(r'//\s*=+.*?=+\s*\n', '', code, flags=re.MULTILINE)
                    code = re.sub(r'//\s*Project:.*?\n', '', code, flags=re.MULTILINE)
                    code = re.sub(r'//\s*Description:.*?\n', '', code, flags=re.MULTILINE)
                    code = re.sub(r'//[-=]+.*$', '', code, flags=re.MULTILINE)
                    code = code.strip()
                    
                    # Validate it has the basic Arduino structure
                    if 'void setup' in code and 'void loop' in code:
                        logger.info(f"Successfully extracted Arduino code ({len(code)} characters)")
                        return code
        
        # If no specific patterns found, try to generate basic code based on circuit type
        logger.warning("No Arduino code found in CrewAI result, generating fallback")
        return generate_default_arduino_code(result_str)
        
    except Exception as e:
        logger.error(f"Failed to extract Arduino code: {e}")
        return generate_default_arduino_code(str(crew_result) if crew_result else "")

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'circuit-ai-secret-key')

# Initialize SocketIO with CORS support and explicit transports
socketio = SocketIO(app, cors_allowed_origins="*", async_mode='eventlet', 
                   transports=['websocket', 'polling'], allow_upgrades=True,
                   logger=True, engineio_logger=True)

# Initialize database
try:
    create_database()
    seed_basic_components()
    logger.info("Database initialized successfully")
except Exception as e:
    logger.error(f"Database initialization failed: {e}")

@app.route('/')
def index():
    """Render the main page."""
    return render_template('index.html')

@app.route('/design', methods=['POST'])
def design_circuit():
    """Handle circuit design requests."""
    try:
        data = request.get_json()
        user_input = data.get('description', '')
        
        if not user_input:
            return jsonify({'status': 'error', 'message': 'No circuit description provided'})
        
        # Start design process in background using eventlet
        eventlet.spawn(run_design_process, user_input)
        
        return jsonify({
            'status': 'success', 
            'message': 'Circuit design started',
            'process_id': 'design_' + str(int(time.time()))
        })
        
    except Exception as e:
        logger.error(f"Design request failed: {e}")
        return jsonify({'status': 'error', 'message': str(e)})

def emit_progress(stage, message, progress, detail=None):
    """Emit progress update via WebSocket with error handling"""
    data = {
        'stage': stage,
        'message': message,
        'progress': progress
    }
    if detail:
        data['detail'] = detail
    
    try:
        # Use socketio.emit with namespace for thread safety
        socketio.emit('design_progress', data, namespace='/')
        logger.info(f"Progress emitted: {stage} - {message} ({progress}%)")
        # Small delay to ensure message is processed
        eventlet.sleep(0.1)
    except Exception as e:
        logger.warning(f"Failed to emit progress: {e}")
        print(f"Progress: {stage} - {message} ({progress}%)")
        if detail:
            print(f"Detail: {detail}")

def run_design_process(user_input: str):
    """Run the complete circuit design process with real-time updates using CrewAI and Phase 2.1 features."""
    try:
        # Stage 1: Initialize CrewAI
        emit_progress('research', 'Initializing AI agents...', 5, 'Setting up CrewAI framework')
        
        eventlet.sleep(1)
        emit_progress('research', 'Starting circuit design workflow...', 10, 'Activating specialized agents')
        
        # Determine circuit type early for proper processing
        circuit_type = determine_circuit_type(user_input)
        logger.info(f"Detected circuit type: {circuit_type}")
        
        # Actually run the CrewAI design process
        eventlet.sleep(1)
        emit_progress('research', 'Running AI-powered design analysis...', 20, 'CrewAI agents processing request')
        
        # Initialize variables
        crew_result = None
        crew_success = False
        simulation_results = None
        schematic_results = None
        plot_data = None
        resistor_selection = None
        led_selection = None
        arduino_code = None
        
        # Run the actual CrewAI workflow
        try:
            crew_result = run_circuit_design(user_input)
            crew_success = True
            emit_progress('design', 'AI design analysis complete', 40, 'Processing agent outputs')
            
            # Generate files based on CrewAI results
            emit_progress('design', 'Generating files from AI results...', 50, 'Creating schematic and code files')
            generate_files_from_crew_result(crew_result, user_input)
            
            # Extract Arduino code from CrewAI results
            arduino_code = extract_arduino_code_from_crew_result(crew_result)
            
            emit_progress('simulation', 'Running Phase 2.1 advanced simulation...', 60, 'AC analysis, noise analysis, Monte Carlo')
            
            # Run Phase 2.1 advanced simulation
            simulation_results = run_advanced_simulation(circuit_type, user_input)
            
            emit_progress('schematic', 'AI-generated files ready', 80, 'All outputs created successfully')
            
            # Set appropriate values for CrewAI success case
            schematic_results = {"status": "AI-generated", "type": circuit_type, "svg_file": f"{circuit_type}_circuit.svg"}
            
        except Exception as e:
            logger.warning(f"CrewAI execution failed, using fallback: {e}")
            crew_result = f"AI Design Analysis for: {user_input}\n\nFallback mode activated due to: {str(e)}"
            crew_success = False
            emit_progress('design', 'Using fallback design process', 40, 'Continuing with simplified workflow')
        
        eventlet.sleep(1)
        
        # Only run fallback circuit generation if CrewAI failed
        if not crew_success:
            # Stage 2: Component Selection and Circuit Generation (Fallback)
            emit_progress('design', 'Selecting optimal components...', 50, 'Running Thompson Sampling algorithms')
            
            # Determine circuit type from user input and run appropriate design
            circuit_type = determine_circuit_type(user_input)
            
            if circuit_type == 'led':
                # LED circuit design
                resistor_selection = component_selector.select_resistor_for_led(5.0, 2.0, 0.02)
                led_selection = component_selector.select_led('red')
                
                emit_progress('simulation', 'Running circuit simulation...', 60, 'SPICE analysis in progress')
                
                # Create and simulate LED circuit
                circuit = simulator.create_led_circuit()
                if circuit:
                    simulation_results = simulator.run_dc_analysis(circuit)
                    plot_data = simulator.generate_plot(simulation_results) if simulation_results else None
                
                emit_progress('schematic', 'Generating schematic...', 75, 'Creating KiCad schematic')
                
                # Generate schematic
                components = {'resistor_value': resistor_selection.get('value', 330) if resistor_selection else 330, 
                             'led_color': 'red'}
                schematic_results = kicad_generator.create_led_schematic(components, './output')
                
            elif circuit_type == 'sensor':
                # Sensor circuit design
                emit_progress('design', 'Designing sensor interface circuit...', 55, 'Configuring analog inputs')
                
                # For sensor circuits, create appropriate components
                resistor_selection = component_selector.select_resistor_for_led(5.0, 3.3, 0.01)  # Pull-up resistor
                
                emit_progress('simulation', 'Simulating sensor circuit...', 65, 'Analyzing signal conditioning')
                
                # Create basic sensor circuit simulation
                circuit = simulator.create_led_circuit()  # Placeholder - would be sensor circuit
                if circuit:
                    simulation_results = simulator.run_dc_analysis(circuit)
                    plot_data = simulator.generate_plot(simulation_results) if simulation_results else None
                
                emit_progress('schematic', 'Creating sensor schematic...', 80, 'Generating circuit diagram')
                
                # Generate sensor schematic (using LED as placeholder)
                components = {'resistor_value': resistor_selection.get('value', 10000) if resistor_selection else 10000, 
                             'sensor_type': 'analog'}
                schematic_results = kicad_generator.create_led_schematic(components, './output')
                
            elif circuit_type == 'motor':
                # Motor control circuit design
                emit_progress('design', 'Designing motor control circuit...', 55, 'Configuring PWM and drivers')
                
                # For motor circuits
                resistor_selection = component_selector.select_resistor_for_led(5.0, 1.0, 0.1)  # Current limiting
                
                emit_progress('simulation', 'Simulating motor control...', 65, 'Analyzing power requirements')
                
                circuit = simulator.create_led_circuit()  # Placeholder
                if circuit:
                    simulation_results = simulator.run_dc_analysis(circuit)
                    plot_data = simulator.generate_plot(simulation_results) if simulation_results else None
                
                emit_progress('schematic', 'Creating motor control schematic...', 80, 'Generating power circuit')
                
                components = {'resistor_value': resistor_selection.get('value', 100) if resistor_selection else 100, 
                             'motor_type': 'servo'}
                schematic_results = kicad_generator.create_led_schematic(components, './output')
                
            else:
                # Generic circuit design
                emit_progress('design', 'Designing custom circuit...', 55, 'Creating general-purpose design')
                
                resistor_selection = component_selector.select_resistor_for_led(5.0, 2.0, 0.02)
                
                emit_progress('simulation', 'Running general simulation...', 65, 'Validating circuit behavior')
                
                circuit = simulator.create_led_circuit()
                if circuit:
                    simulation_results = simulator.run_dc_analysis(circuit)
                    plot_data = simulator.generate_plot(simulation_results) if simulation_results else None
                
                emit_progress('schematic', 'Generating custom schematic...', 80, 'Creating circuit layout')
                
                components = {'resistor_value': resistor_selection.get('value', 1000) if resistor_selection else 1000, 
                             'circuit_type': 'custom'}
                schematic_results = kicad_generator.create_led_schematic(components, './output')
        
        # Stage 3: Completion
        emit_progress('complete', 'Design complete!', 100, 'All files generated successfully')
        
        # Prepare comprehensive results
        final_results = {
            'crew_result': str(crew_result) if crew_result else f"Circuit design completed for {circuit_type} circuit",
            'simulation': simulation_results,
            'schematic': schematic_results,
            'plot_data': plot_data,
            'circuit_type': circuit_type,
            'arduino_code': arduino_code,
            'components': {
                'resistor': resistor_selection,
                'led': led_selection
            },
            'success': True,
            'crew_success': crew_success,
            'phase_2_1_enabled': PHASE_2_1_AVAILABLE
        }
        
        # Send final results
        try:
            socketio.emit('design_complete', final_results, namespace='/')
            logger.info(f"Design complete event emitted successfully for {circuit_type} circuit")
        except Exception as e:
            logger.warning(f"Failed to emit design_complete: {e}")
            print(f"Design process completed successfully for {circuit_type} circuit!")
        
    except Exception as e:
        logger.error(f"Design process failed: {e}")
        try:
            socketio.emit('design_error', {
                'error': str(e),
                'message': 'Design process encountered an error'
            }, namespace='/')
        except Exception as emit_error:
            logger.warning(f"Failed to emit error: {emit_error}")
            print(f"Design process failed: {e}")

def determine_circuit_type(user_input: str):
    """Determine the type of circuit based on user input."""
    user_input_lower = user_input.lower()
    
    # LED-related keywords
    if any(keyword in user_input_lower for keyword in ['led', 'light', 'blink', 'brightness', 'illuminate']):
        return 'led'
    
    # Sensor-related keywords
    elif any(keyword in user_input_lower for keyword in ['sensor', 'temperature', 'humidity', 'pressure', 'sound', 'loudness', 'distance', 'motion', 'light sensor', 'photoresistor']):
        return 'sensor'
    
    # Motor-related keywords
    elif any(keyword in user_input_lower for keyword in ['motor', 'servo', 'stepper', 'rotate', 'movement', 'actuator']):
        return 'motor'
    
    # Default to LED for simple cases
    else:
        return 'led'

@app.route('/simulate', methods=['POST'])
def simulate_circuit():
    """Handle circuit simulation requests."""
    try:
        data = request.get_json()
        circuit_type = data.get('type', 'led')
        
        if circuit_type == 'led':
            led_voltage = data.get('led_voltage', 2.0)
            supply_voltage = data.get('supply_voltage', 5.0)
            
            # Create and simulate circuit
            circuit = simulator.create_led_circuit(led_voltage, supply_voltage)
            if not circuit:
                return jsonify({'status': 'error', 'message': 'Failed to create circuit'})
            
            # Run DC analysis
            dc_results = simulator.run_dc_analysis(circuit)
            
            # Run transient analysis
            transient_results = simulator.run_transient_analysis(circuit, duration=2.0)
            
            # Generate plots
            dc_plot = simulator.generate_plot(dc_results) if dc_results else None
            transient_plot = simulator.generate_plot(transient_results) if transient_results else None
            
            return jsonify({
                'status': 'success',
                'dc_analysis': dc_results,
                'transient_analysis': transient_results,
                'dc_plot': dc_plot,
                'transient_plot': transient_plot
            })
        
        return jsonify({'status': 'error', 'message': 'Unsupported circuit type'})
        
    except Exception as e:
        logger.error(f"Simulation failed: {e}")
        return jsonify({'status': 'error', 'message': str(e)})

@app.route('/components', methods=['GET'])
def get_components():
    """Get available components from database."""
    try:
        session = get_session()
        from database.models import Component
        
        components = session.query(Component).all()
        component_list = []
        
        for comp in components:
            component_list.append({
                'id': comp.id,
                'name': comp.name,
                'category': comp.category,
                'value': comp.value,
                'unit': comp.unit,
                'cost': comp.cost,
                'description': comp.description
            })
        
        session.close()
        return jsonify({'status': 'success', 'components': component_list})
        
    except Exception as e:
        logger.error(f"Failed to get components: {e}")
        return jsonify({'status': 'error', 'message': str(e)})

@app.route('/download/<path:filename>')
def download_file(filename):
    """Download generated files."""
    try:
        return send_from_directory('./output', filename, as_attachment=True)
    except Exception as e:
        logger.error(f"File download failed: {e}")
        return jsonify({'status': 'error', 'message': 'File not found'})

@app.route('/view/<path:filename>')
def view_file(filename):
    """View generated files (for embedding in web page)."""
    try:
        # Look in the output directory relative to the project root
        output_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'output')
        return send_from_directory(output_dir, filename, as_attachment=False)
    except Exception as e:
        logger.error(f"File view failed: {e}")
        return jsonify({'status': 'error', 'message': 'File not found'})

@socketio.on('connect')
def handle_connect():
    """Handle client connection."""
    logger.info('Client connected')
    emit('connected', {'message': 'Connected to Circuit AI'})

@socketio.on('disconnect')
def handle_disconnect():
    """Handle client disconnection."""
    logger.info('Client disconnected')

@socketio.on('test_simulation')
def handle_test_simulation():
    """Handle test simulation request."""
    try:
        emit('design_progress', {
            'stage': 'test',
            'message': 'Running test simulation...',
            'progress': 50
        })
        
        # Run a simple LED circuit simulation
        circuit = simulator.create_led_circuit()
        if circuit:
            results = simulator.run_dc_analysis(circuit)
            plot_data = simulator.generate_plot(results) if results else None
            
            emit('simulation_complete', {
                'results': results,
                'plot_data': plot_data
            })
        else:
            emit('simulation_error', {'error': 'Failed to create test circuit'})
            
    except Exception as e:
        logger.error(f"Test simulation failed: {e}")
        emit('simulation_error', {'error': str(e)})

if __name__ == '__main__':
    # Create output directory
    os.makedirs('./output', exist_ok=True)
    
    # Run with SocketIO
    socketio.run(app, host='0.0.0.0', port=12000, debug=True, allow_unsafe_werkzeug=True) 