research_task:
  description: >
    Analyze the user input: "{user_input}" and extract the following information:
    1. Project type and main functionality required
    2. List of required components (microcontroller, sensors, actuators, etc.)
    3. Electrical specifications (voltage levels, current requirements, timing)
    4. Interface requirements (digital/analog pins, communication protocols)
    5. Any special considerations or constraints
    
    Provide a structured analysis that will guide the circuit design process.
  expected_output: >
    A detailed technical specification document in JSON format containing:
    - project_type: string describing the project category
    - components_needed: list of required component types with specifications
    - electrical_specs: voltage, current, and power requirements
    - pin_requirements: Arduino pin assignments and types needed
    - special_requirements: any additional considerations
  agent: research_agent

design_task:
  description: >
    Based on the research specifications from the previous task, create a complete circuit design:
    1. Generate a schematic with proper component placement
    2. Create electrical connections following best practices
    3. Ensure proper power distribution and grounding
    4. Generate a netlist for simulation
    5. Validate the design against electrical rules
    
    Use the component database to select appropriate parts and create a manufacturable design.
  expected_output: >
    A complete circuit design package containing:
    - schematic_data: JSON representation of the circuit schematic
    - netlist: SPICE-compatible netlist for simulation
    - component_list: list of selected components with specifications
    - design_notes: important design considerations and assumptions
  agent: design_agent

component_selection_task:
  description: >
    Select optimal components for the circuit design based on:
    1. Technical requirements from the research task
    2. Circuit specifications from the design task
    3. Component database with performance history
    4. Cost and availability considerations
    
    Use intelligent selection algorithms to balance performance, cost, and reliability.
  expected_output: >
    Optimized component selection containing:
    - selected_components: list of specific components with part numbers
    - selection_rationale: explanation of selection criteria and trade-offs
    - alternatives: backup component options
    - total_cost: estimated project cost
  agent: component_selection_agent

simulation_task:
  description: >
    Perform comprehensive circuit simulation using the netlist and components from previous tasks:
    1. DC operating point analysis
    2. Transient analysis for time-dependent behavior
    3. AC analysis with frequency sweeps for Bode plots (Phase 2.1)
    4. Noise analysis for low-noise circuit design (Phase 2.1)
    5. Monte Carlo analysis for statistical validation (Phase 2.1)
    6. Temperature analysis for thermal performance (Phase 2.1)
    7. Performance metrics calculation (bandwidth, gain margins, etc.)
    9. Check for potential issues or violations
    10. Generate advanced performance metrics and plots
    
    Iterate with the design agent if issues are found.
  expected_output: >
    Complete simulation results containing:
    - dc_analysis: DC operating point results
    - transient_analysis: time-domain simulation results
    - ac_analysis: frequency response and Bode plots (Phase 2.1)
    - noise_analysis: noise performance metrics (Phase 2.1)
    - monte_carlo_analysis: statistical analysis results (Phase 2.1)
    - temperature_analysis: thermal performance data (Phase 2.1)
    - performance_metrics: comprehensive performance indicators
    - advanced_plots: Bode plots, noise plots, statistical distributions
    - plots: voltage/current waveforms and other visualizations
    - validation_status: pass/fail for design requirements
    - recommendations: suggestions for improvements if needed
  agent: simulation_agent

pcb_layout_task:
  description: >
    Generate professional PCB layout based on:
    1. Circuit design and schematic from the design task
    2. Component specifications from the component selection task
    3. Simulation results and thermal analysis from the simulation task
    4. Manufacturing requirements and constraints
    
    Create a complete PCB layout with automated placement, routing, and manufacturing files.
  expected_output: >
    Complete PCB layout package containing:
    - pcb_layout: automated component placement and routing results
    - manufacturing_files: Gerber files, drill files, and pick & place data
    - assembly_documentation: assembly drawings and instructions
    - bom_data: intelligent bill of materials with supplier information
    - drc_results: design rule check results and recommendations
    - thermal_analysis: thermal management assessment
    - cost_analysis: manufacturing cost breakdown and optimization suggestions
    - 3d_visualization: 3D PCB rendering and layout views
  agent: pcb_layout_agent

code_generation_task:
  description: >
    Generate Arduino code based on:
    1. Circuit design from the design task
    2. Component specifications from the component selection task
    3. User requirements from the research task
    4. Pin assignments from the schematic
    
    Create clean, well-commented code that properly interfaces with the hardware.
  expected_output: >
    Complete Arduino code package containing:
    - main_code: the primary .ino file with setup() and loop() functions
    - pin_definitions: clear pin assignment definitions
    - code_comments: detailed explanations of functionality
    - usage_instructions: how to upload and use the code
  agent: code_generation_agent

documentation_task:
  description: >
    Create comprehensive project documentation using outputs from all previous tasks:
    1. Research specifications from the research task
    2. Circuit design from the design task
    3. Component selection from the component selection task
    4. Simulation results from the simulation task
    5. PCB layout and manufacturing files from the pcb layout task
    6. Arduino code from the code generation task
    
    Compile into a user-friendly project guide with complete manufacturing information.
  expected_output: >
    Complete project documentation containing:
    - project_overview: summary of functionality and features
    - bill_of_materials: detailed component list with suppliers
    - pcb_manufacturing: PCB fabrication specifications and files
    - assembly_instructions: step-by-step building guide with PCB assembly
    - code_explanation: detailed code walkthrough
    - troubleshooting: common issues and solutions
    - testing_procedures: how to verify the project works
    - manufacturing_guide: how to order PCBs and components
  agent: documentation_agent 